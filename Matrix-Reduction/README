# Matrix Reduction Algorithm

### Overview
This Python script implements an algorithm to reduce an adjacency matrix by calculating the differences between the matrix and its transpose. The reduction process helps identify the symmetrical properties of the matrix and is useful in various mathematical and graph-related applications.

### Functions
1. **create_adjacency_matrix**: Generates an adjacency matrix representing the costs from each node to another node based on the provided edges.
2. **transpose**: Computes the transpose of a given matrix.
3. **matrix_difference**: Calculates the sum of absolute differences between corresponding elements of two matrices.
4. **reduce_matrix**: Reduces the given matrix by subtracting its transpose from itself.

### Example Usage
1. **Input**: Enter the number of nodes and the cost from each node to every other node.
2. **Output**: The script will display the original adjacency matrix, the reduced adjacency matrix, and the sum of differences between them.

### Usage
1. **Run the Script**: Execute the script using Python.
   ```bash
   python matrix_reduction.py
   ```
2. **Input**: Follow the prompts to input the number of nodes and the cost from each node to every other node.
3. **Output**: The script will display the original and reduced adjacency matrices along with the sum of differences.

### Example
Suppose we have the following input:
```
Enter the number of nodes: 3
Enter the cost from each node (i to j):
Cost from node 0 to node 0: 0
Cost from node 0 to node 1: 2
Cost from node 0 to node 2: 4
Cost from node 1 to node 0: 2
Cost from node 1 to node 1: 0
Cost from node 1 to node 2: 3
Cost from node 2 to node 0: 4
Cost from node 2 to node 1: 3
Cost from node 2 to node 2: 0
```
The script will output:
```
Original Adjacency Matrix:
[0, 2, 4]
[2, 0, 3]
[4, 3, 0]

Reduced Adjacency Matrix:
[0, 0, 1]
[0, 0, 1]
[-1, -1, 0]

Sum of Differences: 10
```

### Notes
- Ensure the input follows the specified format: cost from each node (i to j).
- This implementation assumes a symmetric adjacency matrix.

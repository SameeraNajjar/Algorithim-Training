## Topological Sort Algorithm

### Overview
This JavaScript file implements a topological sort algorithm. Topological sorting is a way of arranging the nodes of a directed graph in such a way that for every directed edge from node A to node B, node A appears before node B in the ordering. This algorithm generates all possible topological orders for a given directed graph.

### Function Signature
```javascript
/**
 * 
 * @param {*} graph 
 * @returns the array of all possible topological orders
 */
function topologicalSort(graph) {
  // Implementation details...
}
```

### Input
- **graph**: An object representing the directed graph where each key-value pair represents a node and its outgoing edges.

### Output
- An array containing all possible topological orders of the input graph.

### Example
```javascript
// Example usage with numbers instead of characters
const graph = {
  1: [3, 4],
  2: [4, 5],
  3: [5],
  4: [5],
  5: []
};

const sorted = topologicalSort(graph);
console.log(sorted);
```
Output:
```
[
  [ 1, 2, 3, 4, 5 ],
  [ 1, 2, 4, 3, 5 ],
  [ 2, 1, 3, 4, 5 ],
  [ 2, 1, 4, 3, 5 ]
]
```

### How It Works
- The algorithm performs a depth-first search (DFS) on the graph to visit each node and its neighbors.
- It utilizes backtracking to generate all possible topological orders by exploring different orderings of nodes.
- The algorithm keeps track of visited nodes to avoid redundant traversal and uses a stack to maintain nodes with no outgoing edges until they are added to the topological order.

### Notes
- This implementation assumes the input graph is represented as an object with node identifiers as keys and arrays of outgoing edges as values.
- It's important to ensure that the input graph is acyclic (contains no directed cycles) for meaningful topological sorting results.
